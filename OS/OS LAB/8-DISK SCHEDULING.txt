#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

void sstf(int requests[], int size, int head) {
    int completed[MAX_SIZE] = {0};
    int seek_sequence[MAX_SIZE];
    int total_seek_time = 0;

    for (int i = 0; i < size; i++) {
        int min_distance = 99999, index = 0;

        for (int j = 0; j < size; j++) {
            if (!completed[j]) {
                int distance = abs(requests[j] - head);
                if (distance < min_distance) {
                    min_distance = distance;
                    index = j;
                }
            }
        }
        completed[index] = 1;
        seek_sequence[i] = requests[index];
        total_seek_time += min_distance;
        head = requests[index];
    }

    printf("SSTF Seek Sequence: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", seek_sequence[i]);
    }
    printf("\nTotal Seek Time (SSTF): %d\n", total_seek_time);
}

void scan(int requests[], int size, int head, int total_tracks) {
    int seek_sequence[MAX_SIZE], total_seek_time = 0;
    int direction = 1; // 1 for moving away from spindle, -1 for towards spindle
    int current = head;

    // Sort requests array
    int temp[MAX_SIZE];
    for (int i = 0; i < size; i++) {
        temp[i] = requests[i];
    }
    // Sort the array
    for (int i = 0; i < size; i++) {
        for (int j = i + 1; j < size; j++) {
            if (temp[i] > temp[j]) {
                int swap = temp[i];
                temp[i] = temp[j];
                temp[j] = swap;
            }
        }
    }

    // Add requests at the end of the track
    int idx = 0;
    while (idx < size && temp[idx] < head) {
        idx++;
    }

    if (direction == 1) { // Moving away from the spindle
        for (int i = idx; i < size; i++) {
            seek_sequence[i - idx] = temp[i];
            total_seek_time += abs(current - temp[i]);
            current = temp[i];
        }
        total_seek_time += abs(current - total_tracks); // Move to end
        current = total_tracks;

        for (int i = idx - 1; i >= 0; i--) {
            seek_sequence[size - 1 - i] = temp[i];
            total_seek_time += abs(current - temp[i]);
            current = temp[i];
        }
    }

    printf("SCAN Seek Sequence: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", seek_sequence[i]);
    }
    printf("\nTotal Seek Time (SCAN): %d\n", total_seek_time);
}

void clook(int requests[], int size, int head) {
    int seek_sequence[MAX_SIZE], total_seek_time = 0;

    // Sort requests array
    int temp[MAX_SIZE];
    for (int i = 0; i < size; i++) {
        temp[i] = requests[i];
    }

    for (int i = 0; i < size; i++) {
        for (int j = i + 1; j < size; j++) {
            if (temp[i] > temp[j]) {
                int swap = temp[i];
                temp[i] = temp[j];
                temp[j] = swap;
            }
        }
    }

    // Find where to start
    int idx = 0;
    while (idx < size && temp[idx] < head) {
        idx++;
    }

    // Process requests in the circular way
    int current = head;
    for (int i = idx; i < size; i++) {
        seek_sequence[i - idx] = temp[i];
        total_seek_time += abs(current - temp[i]);
        current = temp[i];
    }

    // Jump to the start
    if (idx > 0) {
        total_seek_time += abs(current - temp[0]);
        current = temp[0];
    }

    for (int i = 0; i < idx; i++) {
        seek_sequence[size - idx + i] = temp[i];
        total_seek_time += abs(current - temp[i]);
        current = temp[i];
    }

    printf("C-Look Seek Sequence: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", seek_sequence[i]);
    }
    printf("\nTotal Seek Time (C-Look): %d\n", total_seek_time);
}

int main() {
    int requests[MAX_SIZE];
    int size, head;

    printf("Enter number of requests: ");
    scanf("%d", &size);
    printf("Enter disk requests: ");
    for (int i = 0; i < size; i++) {
        scanf("%d", &requests[i]);
    }
    printf("Enter initial head position: ");
    scanf("%d", &head);

    sstf(requests, size, head);
    scan(requests, size, head, 200); // Assuming total tracks = 200
    clook(requests, size, head);

    return 0;
}

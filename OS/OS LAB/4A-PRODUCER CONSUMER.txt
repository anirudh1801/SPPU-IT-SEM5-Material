#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h> // For sleep()

#define BUFFER_SIZE 10
#define TOTAL_ITEMS 20 // Total items to produce and consume

int buffer[BUFFER_SIZE];
int in = 0; // Producer index
int out = 0; // Consumer index

// Semaphores and mutex for synchronization
sem_t empty; // Counts empty slots
sem_t full;  // Counts full slots
pthread_mutex_t mutex; // Mutex for critical section

void* producer(void* arg) {
    int item;
    for (int i = 0; i < TOTAL_ITEMS; i++) {
        item = rand() % 100; // Produce a random item

        // Wait for an empty slot and lock the buffer
        sem_wait(&empty);
        pthread_mutex_lock(&mutex);

        // Produce item
        buffer[in] = item;
        printf("Producer produced item %d\n", item);
        in = (in + 1) % BUFFER_SIZE; // Circular buffer index

        // Unlock the buffer and signal a full slot
        pthread_mutex_unlock(&mutex);
        sem_post(&full);

        sleep(1); // Simulate time to produce
    }
    return NULL;
}

void* consumer(void* arg) {
    int item;
    for (int i = 0; i < TOTAL_ITEMS; i++) {
        // Wait for a full slot and lock the buffer
        sem_wait(&full);
        pthread_mutex_lock(&mutex);

        // Consume item
        item = buffer[out];
        printf("Consumer consumed item %d\n", item);
        out = (out + 1) % BUFFER_SIZE; // Circular buffer index

        // Unlock the buffer and signal an empty slot
        pthread_mutex_unlock(&mutex);
        sem_post(&empty);

        sleep(1); // Simulate time to consume
    }
    return NULL;
}

int main() {
    pthread_t prod_thread, cons_thread;

    // Initialize semaphores and mutex
    sem_init(&empty, 0, BUFFER_SIZE); // BUFFER_SIZE empty slots initially
    sem_init(&full, 0, 0); // No full slots initially
    pthread_mutex_init(&mutex, NULL);

    // Create producer and consumer threads
    pthread_create(&prod_thread, NULL, producer, NULL);
    pthread_create(&cons_thread, NULL, consumer, NULL);

    // Wait for threads to finish
    pthread_join(prod_thread, NULL);
    pthread_join(cons_thread, NULL);

    // Cleanup
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    printf("Production and consumption completed.\n");

    return 0;
}

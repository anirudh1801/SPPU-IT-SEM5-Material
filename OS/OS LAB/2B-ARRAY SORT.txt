// parent program 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void printArray(int arr[]){
    int n = 5;
    for (int i = 0 ; i < n ; i++){
        printf("%d", arr[i]);
   }
}

void bubblesort(int arr[]){
int n = 5;
int i , j ;
for(i = 0 ; i < n -1 ; i++){
   for( j = 0  ; j < n - i - 1 ; j++){
        if(arr[j] > arr[j + 1]){
              int temp = arr[j];
              arr[j] = arr[j + 1];
              arr[j + 1] = temp;
        }
    }
  }
}
   

int main(){
  
       int n = 5 ; 
       int arr[] = {2,3,62,73,7};
       bubblesort(arr);
       
    char *args[n + 2];
    args[0] = "./child";  // Child program name
    for (int i = 0; i < n; i++) {
        args[i + 1] = malloc(12);  // Allocate space for integers as strings
        sprintf(args[i + 1], "%d", arr[i]);
    }
    args[n + 1] = NULL;  // Null-terminate the argument list
       
     pid_t pid = fork();
     if (pid == 0) {  // Child process
        execve(args[0], args, NULL);
        perror("execve failed");
        exit(1);
    } else if (pid > 0) {  // Parent process
        wait(NULL);  // Wait for child process to finish
    } else {
        perror("Fork failed");
    }
       return 0;
       
}




// child program 

#include <stdio.h>

int main(int argc, char *argv[]) {
    // Print arguments in reverse order
    printf("Reversed array:\n");
    for (int i = argc - 1; i > 0; i--) {
        printf("%s ", argv[i]);
    }
    printf("\n");

    return 0;
}

// commands 
gcc -o parent parent.c
gcc -0 child child.c 

// run 
./parent
